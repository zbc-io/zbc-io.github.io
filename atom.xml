<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhang BaiCheng&#39;s Programming Blog</title>
  
  <subtitle>Sharp tools make good work</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zbc.io/"/>
  <updated>2021-03-11T15:41:21.386Z</updated>
  <id>http://zbc.io/</id>
  
  <author>
    <name>百成</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安装PostgreSQL遇到的问题</title>
    <link href="http://zbc.io/cn/postgresql/postgresql-install-question/"/>
    <id>http://zbc.io/cn/postgresql/postgresql-install-question/</id>
    <published>2020-07-01T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装完成后提示如下信息"><a href="#安装完成后提示如下信息" class="headerlink" title="安装完成后提示如下信息"></a>安装完成后提示如下信息</h1><pre><code>Problem running post-install step. Installation may not complete correctly The database cluster initialisation failed.</code></pre><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>由于所制定的data目录没有写入权限。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>可在安装之后参考如下步骤进行数据库初始化：</p><ol><li><p>修改data目录权限</p><p> 此处省略。</p></li><li><p>初始化数据库，可使用initdb –help查看详细参数设置：</p><p> initdb -U postgres -W -D “C:\Program Files\PostgreSQL\10\data”</p></li><li><p>启动pg</p><p> pg_ctl -D “C:\Program Files\PostgreSQL\10\data” -l logfile start</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装完成后提示如下信息&quot;&gt;&lt;a href=&quot;#安装完成后提示如下信息&quot; class=&quot;headerlink&quot; title=&quot;安装完成后提示如下信息&quot;&gt;&lt;/a&gt;安装完成后提示如下信息&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Problem running post-insta
      
    
    </summary>
    
      <category term="postgresql" scheme="http://zbc.io/categories/postgresql/"/>
    
    
      <category term="PostgreSQL" scheme="http://zbc.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>JVM运行时异常StackOverflowError和OutOfMemoryError</title>
    <link href="http://zbc.io/cn/jvm/stackoverflowerror-and-outofmemoryerror/"/>
    <id>http://zbc.io/cn/jvm/stackoverflowerror-and-outofmemoryerror/</id>
    <published>2020-07-01T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StackOverflowError"><a href="#StackOverflowError" class="headerlink" title="StackOverflowError"></a>StackOverflowError</h1><ol><li>线程请求的栈容量超过了JVM栈允许的最大容量。</li><li>线程请求的栈容量超过本地方法栈允许的最大容量。</li></ol><h1 id="OutOfMemoryError"><a href="#OutOfMemoryError" class="headerlink" title="OutOfMemoryError"></a>OutOfMemoryError</h1><ol><li>JVM栈可以动态扩展，并且扩展的动作已经尝试过，但是目前无法申请到足够的内存去完成扩展，或者在建立新的线程时没有足够的内存去创建对应的JVM栈。</li><li>实际所需的堆超过了自动内存管理系统（GC）能提供的最大容量。</li><li>方法区的内存空间不能满足内存分配请求。</li><li>当创建类或接口的时候，构造运行时常量池所需要的内存空间超过了方法区所能提供的最大值。</li><li>本地方法栈可以动态扩展，并且扩展的动作已经尝试过，但是目前无法申请到足够的内存去完成扩展，或者在建立新的线程时没有足够的内存去创建对应的本地方法栈。</li></ol><p>备注：摘自《Java虚拟机规范》。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;StackOverflowError&quot;&gt;&lt;a href=&quot;#StackOverflowError&quot; class=&quot;headerlink&quot; title=&quot;StackOverflowError&quot;&gt;&lt;/a&gt;StackOverflowError&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="jvm" scheme="http://zbc.io/categories/jvm/"/>
    
    
      <category term="JVM" scheme="http://zbc.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch学习汇总</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/Spring-Batch/spring-batch/"/>
    <id>http://zbc.io/cn/技术/Spring-Batch/spring-batch/</id>
    <published>2019-02-26T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-摘要"><a href="#0-摘要" class="headerlink" title="0 摘要"></a>0 摘要</h2><p>本文整理自Spring Batch官方文档。</p><p>Spring Batch官方文档中，提供两种实例代码，XML和Java Config，默认选择Java Config。</p><h2 id="1-Spring-Batch-简介"><a href="#1-Spring-Batch-简介" class="headerlink" title="1 Spring Batch 简介"></a>1 Spring Batch 简介</h2><h3 id="1-1-Spring-Batch"><a href="#1-1-Spring-Batch" class="headerlink" title="1.1 Spring Batch"></a>1.1 Spring Batch</h3><p>Spring Batch 是一个轻量级，全面的批处理框架，旨在开发对企业系统日常运营至关重要的强大批处理应用程序。Spring Batch 以Spring框架为基础，开发人员可以使用Spring框架的原有服务。</p><h3 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a>1.2 使用场景</h3><p>通常一个典型的批处理程序如下：</p><ul><li>Read：从数据库，文件或队列中读取大量记录。</li><li>Process：以某种方式处理数据。</li><li>Write：以修改的形式写回数据。</li></ul><p>Spring Batch自动执行此基本批处理迭代，提供处理类似事务的功能，通常在脱机环境中处理，无需任何用户交互。批处理作业是大多数IT项目的一部分，Spring Batch是唯一提供强大的企业级解决方案的开源框架。</p><p>业务场景</p><ul><li>定期提交批处理</li><li>并发批处理：并行处理作业</li><li>分阶段的企业消息驱动处理</li><li>大规模并行批处理</li><li>失败后手动或预定重启</li><li>依赖步骤的顺序处理（使用扩展的toworkflow驱动批次）</li><li>部分处理：跳过记录（例如，回滚时）</li><li>整批交易，适用于批量较小或现有存储过程/脚本的情况</li></ul><p>技术目标</p><ul><li>批处理开发人员使用Spring编程模型：专注于业务逻辑，让框架负责基础架构。</li><li>清楚地分离基础架构，批处理执行环境和批处理应用程序之间的关注点。</li><li>提供通用的核心执行服务作为所有项目可以实现的接口。</li><li>提供可以“开箱即用”使用的核心执行接口的简单和默认实现。</li><li>通过在所有层中利用spring框架，易于配置，定制和扩展服务。</li><li>所有现有核心服务都应易于更换或扩展，而不会对基础架构层产生任何影响。</li><li>提供一个简单的部署模型，使用Maven构建的架构JAR与应用程序完全分离。</li></ul><h3 id="1-3-Spring-Batch-架构"><a href="#1-3-Spring-Batch-架构" class="headerlink" title="1.3 Spring Batch 架构"></a>1.3 Spring Batch 架构</h3><p>Spring Batch的设计具有可扩展性和多样化的最终用户群。下图显示了支持最终用户开发人员的可扩展性和易用性的分层体系结构。</p><p><img src="https://docs.spring.io/spring-batch/4.1.x/reference/html/images/spring-batch-layers.png" alt="Spring Batch Architecture"></p><p>这种分层架构突出了三个主要的高级组件：应用程序，核心和基础架构。该应用程序包含开发人员使用Spring Batch编写的所有批处理作业和自定义代码。Batch Core包含启动和控制批处理作业所需的核心运行时类。它包括实现 JobLauncher，Job和Step。Application和Core都建立在通用基础架构之上。此基础结构包含常见的读取器和编写器和服务（例如RetryTemplate），应用程序开发人员（读取器和编写器，如ItemReader和ItemWriter）以及核心框架本身（重试，它是自己的库）都使用它们。</p><h3 id="1-4-官方提供的构建策略"><a href="#1-4-官方提供的构建策略" class="headerlink" title="1.4 官方提供的构建策略"></a>1.4 官方提供的构建策略</h3><p>在开始设计批处理作业时，应将业务逻辑分解为一系列步骤，这些步骤可使用以下标准构建块实现：</p><ul><li><p>转换应用程序：对于由外部系统提供或生成的每种类型的文件，必须创建转换应用程序，以将提供的事务记录转换为处理所需的标准格式。</p></li><li><p>验证应用程序：验证应用程序确保所有输入/输出记录正确且一致。</p></li><li><p>提取应用程序：从数据库或输入文件中读取一组记录，根据预定义规则选择记录，并将记录写入输出文件的应用程序。</p></li><li><p>提取/更新应用程序：从数据库或输入文件中读取记录，并对由每个输入记录中的数据驱动的数据库或输出文件进行更改的应用程序。</p></li><li><p>处理和更新应用程序：从提取或验证应用程序对输入事务执行处理的应用程序。处理通常涉及读取数据库以获取处理所需的数据，可能更新数据库并创建输出处理的记录。</p></li><li><p>输出/格式应用程序：读取输入文件的应用程序，根据标准格式从该记录重组数据，并生成用于打印或传输到另一个程序或系统的输出文件。</p></li></ul><p>批量应用程序还可以按其输入源进行分类：</p><ul><li>数据库驱动的应用程序由从数据库检索的行或值驱动。</li><li>文件驱动的应用程序由从文件中检索的记录或值驱动。</li><li>消息驱动的应用程序由从消息队列中检索的消息驱动。</li></ul><h2 id="2-批处理的基本概念"><a href="#2-批处理的基本概念" class="headerlink" title="2 批处理的基本概念"></a>2 批处理的基本概念</h2><p>下图是批量参考体系结构的简化版本，已使用了数十年。Spring Batch提供了健壮，可维护系统中常见的层，组件和技术服务的物理实现，这些系统用于解决简单到复杂批处理应用程序的创建问题，其基础结构和扩展可满足非常复杂的处理需求。</p><p><img src="https://docs.spring.io/spring-batch/4.1.x/reference/html/images/spring-batch-reference-model.png" alt="Batch SysArch"></p><h3 id="2-1-Job"><a href="#2-1-Job" class="headerlink" title="2.1 Job"></a>2.1 Job</h3><p>在Spring Batch中，Job是Step实例的容器。</p><p>Job的配置包含：</p><ul><li>易于理解的名字</li><li>Step实例的定义和排序</li><li>是否可重启</li></ul><h4 id="2-1-1-JobInstance"><a href="#2-1-1-JobInstance" class="headerlink" title="2.1.1 JobInstance"></a>2.1.1 JobInstance</h4><h4 id="2-1-2-JobParameters"><a href="#2-1-2-JobParameters" class="headerlink" title="2.1.2 JobParameters"></a>2.1.2 JobParameters</h4><h4 id="2-1-3-JobExecution"><a href="#2-1-3-JobExecution" class="headerlink" title="2.1.3 JobExecution"></a>2.1.3 JobExecution</h4><h3 id="2-2-Step"><a href="#2-2-Step" class="headerlink" title="2.2 Step"></a>2.2 Step</h3><h3 id="2-3-ExecutionContext"><a href="#2-3-ExecutionContext" class="headerlink" title="2.3 ExecutionContext"></a>2.3 ExecutionContext</h3><h3 id="2-4-JobRepository"><a href="#2-4-JobRepository" class="headerlink" title="2.4 JobRepository"></a>2.4 JobRepository</h3><h3 id="2-5-JobLauncher"><a href="#2-5-JobLauncher" class="headerlink" title="2.5 JobLauncher"></a>2.5 JobLauncher</h3><h3 id="2-6-Item-Reader"><a href="#2-6-Item-Reader" class="headerlink" title="2.6 Item Reader"></a>2.6 Item Reader</h3><h3 id="2-7-Item-Writer"><a href="#2-7-Item-Writer" class="headerlink" title="2.7 Item Writer"></a>2.7 Item Writer</h3><h3 id="2-8-Item-Processor"><a href="#2-8-Item-Processor" class="headerlink" title="2.8 Item Processor"></a>2.8 Item Processor</h3><h3 id="2-9-Batch-Namespace"><a href="#2-9-Batch-Namespace" class="headerlink" title="2.9 Batch Namespace"></a>2.9 Batch Namespace</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0-摘要&quot;&gt;&lt;a href=&quot;#0-摘要&quot; class=&quot;headerlink&quot; title=&quot;0 摘要&quot;&gt;&lt;/a&gt;0 摘要&lt;/h2&gt;&lt;p&gt;本文整理自Spring Batch官方文档。&lt;/p&gt;
&lt;p&gt;Spring Batch官方文档中，提供两种实例代码，XML和J
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Spring Batch" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/Spring-Batch/"/>
    
    
      <category term="Spring Batch" scheme="http://zbc.io/tags/Spring-Batch/"/>
    
  </entry>
  
  <entry>
    <title>Java Config 注解</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/Java/java-config/"/>
    <id>http://zbc.io/cn/技术/Java/java-config/</id>
    <published>2019-02-25T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<p>java config是指基于java配置的spring。传统的Spring一般都是基本xml配置的，后来spring3.0新增了许多java config的注解，特别是spring boot，基本都是清一色的java config。</p><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><p>在类上打上这一标签，表示这个类是配置类</p><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><p>相当于xml的</p><pre><code>&lt;context:componentscan basepakage=&gt;</code></pre><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><p>bean的定义，相当于xml的</p><pre><code>&lt;bean id=&quot;objectMapper&quot; class=&quot;org.codehaus.jackson.map.ObjectMapper&quot; /&gt; </code></pre><h4 id="EnableWebMvc"><a href="#EnableWebMvc" class="headerlink" title="@EnableWebMvc"></a>@EnableWebMvc</h4><p>相当于xml的</p><pre><code>&lt;mvc:annotation-driven&gt;</code></pre><h4 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h4><p>相当于xml的</p><pre><code>&lt;import resource=&quot;applicationContext-cache.xml&quot;&gt;</code></pre><h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h4><p>spring 3.1开始引入，它是基于java config的注解，用于读取properties文件</p><h4 id="Profile"><a href="#Profile" class="headerlink" title="@Profile"></a>@Profile</h4><p>spring3.1开始引入,一般用于多环境配置，激活时可用@ActiveProfiles注解，@ActiveProfiles(“dev”)等同于xml配置</p><pre><code>&lt;beans profile=&quot;dev&quot;&gt;    &lt;bean id=&quot;beanname&quot; class=&quot;com.pz.demo.ProductRPC&quot;/&gt;&lt;/beans&gt;</code></pre><p>激活该profile spring.profiles.active，也可设置默认值 spring.profiles.default</p><pre><code>&lt;context-param&gt;    &lt;param-name&gt;spring.profiles.default&lt;/param-name&gt;    &lt;param-value&gt;dev&lt;/param-value&gt;&lt;/context-param&gt;</code></pre><p>参考：<a href="https://www.cnblogs.com/whx7762/p/7828435.html" target="_blank" rel="noopener">Java Config 注解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;java config是指基于java配置的spring。传统的Spring一般都是基本xml配置的，后来spring3.0新增了许多java config的注解，特别是spring boot，基本都是清一色的java config。&lt;/p&gt;
&lt;h4 id=&quot;Configu
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
      <category term="Java" scheme="http://zbc.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>gson的一些用法</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/gson/gson-usage/"/>
    <id>http://zbc.io/cn/技术/gson/gson-usage/</id>
    <published>2018-05-18T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、自定义json中key的名字"><a href="#1、自定义json中key的名字" class="headerlink" title="1、自定义json中key的名字"></a>1、自定义json中key的名字</h4><p>可以在Java里面的属性上，加上如下注释：@SerializedName()</p><p>例如：  </p><pre><code>@SerializedName(&quot;businesscontrolno&quot;)</code></pre><p>参考：<a href="https://www.jianshu.com/p/e740196225a4" target="_blank" rel="noopener">https://www.jianshu.com/p/e740196225a4</a></p><h4 id="2、gson处理null字段"><a href="#2、gson处理null字段" class="headerlink" title="2、gson处理null字段"></a>2、gson处理null字段</h4><pre><code>Gson g = new GsonBuilder().serializeNulls().create();</code></pre><h4 id="3、gson处理日期字段"><a href="#3、gson处理日期字段" class="headerlink" title="3、gson处理日期字段"></a>3、gson处理日期字段</h4><pre><code>Gson g = new GsonBuilder().setDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;).create();</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1、自定义json中key的名字&quot;&gt;&lt;a href=&quot;#1、自定义json中key的名字&quot; class=&quot;headerlink&quot; title=&quot;1、自定义json中key的名字&quot;&gt;&lt;/a&gt;1、自定义json中key的名字&lt;/h4&gt;&lt;p&gt;可以在Java里面的属性上，
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="gson" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/gson/"/>
    
    
      <category term="gson" scheme="http://zbc.io/tags/gson/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch的一些操作</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/ElasticSearch/elasticsearch-operation/"/>
    <id>http://zbc.io/cn/技术/ElasticSearch/elasticsearch-operation/</id>
    <published>2018-05-16T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、update"><a href="#1、update" class="headerlink" title="1、update"></a>1、update</h3><p>POST <a href="http://es.zbc.io/{index}/{type}/{id}/_update" target="_blank" rel="noopener">http://es.zbc.io/{index}/{type}/{id}/_update</a></p><pre><code>{  &quot;doc&quot;: {    &quot;{column}&quot;: &quot;{value}&quot;  }}</code></pre><p>例如：<br>POST <a href="http://es.zbc.io/logstash-car-ctrl/prpbusinesscontrol/" target="_blank" rel="noopener">http://es.zbc.io/logstash-car-ctrl/prpbusinesscontrol/</a></p><pre><code>B201800044820/_update{  &quot;doc&quot;: {    &quot;validstatus&quot;: &quot;0&quot;  }}</code></pre><p>参考：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/partial-updates.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/partial-updates.html</a></p><h4 id="2、insert"><a href="#2、insert" class="headerlink" title="2、insert"></a>2、insert</h4><p>PUT <a href="http://es.zbc.io/{index}/{type}/{id}" target="_blank" rel="noopener">http://es.zbc.io/{index}/{type}/{id}</a></p><pre><code>{  &quot;field&quot;: &quot;value&quot;,  ...}</code></pre><p>例如：<br>PUT <a href="http://es.zbc.io/logstash-car-ctrl/prpbusinesscontrol/B201800044820" target="_blank" rel="noopener">http://es.zbc.io/logstash-car-ctrl/prpbusinesscontrol/B201800044820</a></p><pre><code>{    &quot;validstatus&quot;: &quot;0&quot;}</code></pre><h4 id="3、创建-raw索引"><a href="#3、创建-raw索引" class="headerlink" title="3、创建.raw索引"></a>3、创建.raw索引</h4><p>PUT <a href="http://es.zbc.io/{index}" target="_blank" rel="noopener">http://es.zbc.io/{index}</a></p><pre><code>{  &quot;mappings&quot;: {    &quot;{type}&quot;: {      &quot;properties&quot;: {        &quot;{column}&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;fields&quot;: {            &quot;raw&quot;: {              &quot;type&quot;: &quot;string&quot;,              &quot;index&quot;: &quot;not_analyzed&quot;            }          }        }      }    }  }}</code></pre><p>例如：<br>POST <a href="http://es.zbc.io/logstash-car-ctrl" target="_blank" rel="noopener">http://es.zbc.io/logstash-car-ctrl</a></p><pre><code>{  &quot;mappings&quot;: {    &quot;prpbusinesscontrol&quot;: {      &quot;properties&quot;: {        &quot;engineno&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;fields&quot;: {            &quot;raw&quot;: {              &quot;type&quot;: &quot;string&quot;,              &quot;index&quot;: &quot;not_analyzed&quot;            }          }        }      }    }  }}</code></pre><h4 id="4、新增字段"><a href="#4、新增字段" class="headerlink" title="4、新增字段"></a>4、新增字段</h4><p>POST <a href="http://es.zbc.io/{index}/{type}/_mapping" target="_blank" rel="noopener">http://es.zbc.io/{index}/{type}/_mapping</a></p><pre><code>{  &quot;properties&quot;: {    &quot;{column}&quot;: {      &quot;type&quot;: &quot;string&quot;,      &quot;fields&quot;: {        &quot;raw&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;index&quot;: &quot;not_analyzed&quot;        }      }    }  }}</code></pre><p>例如：<br>POST <a href="http://es.zbc.io/logstash-car-ctrl/prpbusinesscontrol/_mapping" target="_blank" rel="noopener">http://es.zbc.io/logstash-car-ctrl/prpbusinesscontrol/_mapping</a></p><pre><code>{  &quot;properties&quot;: {    &quot;vinno2&quot;: {      &quot;type&quot;: &quot;string&quot;,      &quot;fields&quot;: {        &quot;raw&quot;: {          &quot;type&quot;: &quot;string&quot;,          &quot;index&quot;: &quot;not_analyzed&quot;        }      }    }  }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、update&quot;&gt;&lt;a href=&quot;#1、update&quot; class=&quot;headerlink&quot; title=&quot;1、update&quot;&gt;&lt;/a&gt;1、update&lt;/h3&gt;&lt;p&gt;POST &lt;a href=&quot;http://es.zbc.io/{index}/{type}/
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ElasticSearch" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://zbc.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch报错汇总</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/ElasticSearch/elasticsearch-faq/"/>
    <id>http://zbc.io/cn/技术/ElasticSearch/elasticsearch-faq/</id>
    <published>2018-05-15T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、error-’Cannot-allocate-memory’-errno-12"><a href="#1、error-’Cannot-allocate-memory’-errno-12" class="headerlink" title="1、error=’Cannot allocate memory’ (errno=12)"></a>1、error=’Cannot allocate memory’ (errno=12)</h3><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>这种情况是因为内存不足</p><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>使用如下方式修改jvm启动内存参数：</p><pre><code>[es@CentOS ~]$ vi elasticsearch/config/jvm.options-Xms512m-Xmx512m</code></pre><h3 id="2、max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-increase-to-at-least-262144"><a href="#2、max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-increase-to-at-least-262144" class="headerlink" title="2、max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]"></a>2、max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</h3><h4 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h4><p>切换到root用户修改配置sysctl.conf</p><pre><code>vi /etc/sysctl.conf</code></pre><p>添加下面配置：</p><pre><code>vm.max_map_count=655360</code></pre><p>并执行命令：</p><pre><code>sysctl -p</code></pre><p>然后，重新启动elasticsearch，即可启动成功。</p><h3 id="3、-es-CentOS-elasticsearch-head-npm-install"><a href="#3、-es-CentOS-elasticsearch-head-npm-install" class="headerlink" title="3、[es@CentOS elasticsearch-head]# npm install"></a>3、[es@CentOS elasticsearch-head]# npm install</h3><p>npm ERR! Error: CERT_UNTRUSTED</p><h4 id="解决办法：-2"><a href="#解决办法：-2" class="headerlink" title="解决办法："></a>解决办法：</h4><p>这是因为ssl验证问题，使用下面的命令取消ssl验证即可解决：</p><pre><code>npm config set strict-ssl false</code></pre><h3 id="4、-es-CentOS-elasticsearch-head-npm-install"><a href="#4、-es-CentOS-elasticsearch-head-npm-install" class="headerlink" title="4、[es@CentOS elasticsearch-head]# npm install"></a>4、[es@CentOS elasticsearch-head]# npm install</h3><p>SyntaxError: Use of const in strict mode.</p><h4 id="解决办法：-3"><a href="#解决办法：-3" class="headerlink" title="解决办法："></a>解决办法：</h4><p>1) Clear NPM’s cache:</p><pre><code>sudo npm cache clean -f</code></pre><p>2) Install a little helper called ‘n’</p><pre><code>sudo npm install -g n</code></pre><p>3) Install latest stable NodeJS version</p><pre><code>sudo n stable</code></pre><h3 id="5、max-file-descriptors-65535-for-elasticsearch-process-is-too-low-increase-to-at-least-65536"><a href="#5、max-file-descriptors-65535-for-elasticsearch-process-is-too-low-increase-to-at-least-65536" class="headerlink" title="5、max file descriptors [65535] for elasticsearch process is too low, increase to at least [65536]"></a>5、max file descriptors [65535] for elasticsearch process is too low, increase to at least [65536]</h3><h4 id="解决办法：-4"><a href="#解决办法：-4" class="headerlink" title="解决办法："></a>解决办法：</h4><p>切换到root用户修改配置sysctl.conf</p><pre><code>vi /etc/sysctl.conf</code></pre><p>添加下面配置：</p><pre><code>fs.file-max=655350</code></pre><p>并执行命令：</p><pre><code>sysctl -p</code></pre><p>然后，重新启动elasticsearch，即可启动成功。</p><h3 id="6、max-number-of-threads-1024-for-user-es-is-too-low-increase-to-at-least-4096"><a href="#6、max-number-of-threads-1024-for-user-es-is-too-low-increase-to-at-least-4096" class="headerlink" title="6、max number of threads [1024] for user [es] is too low, increase to at least [4096]"></a>6、max number of threads [1024] for user [es] is too low, increase to at least [4096]</h3><h4 id="解决办法：-5"><a href="#解决办法：-5" class="headerlink" title="解决办法："></a>解决办法：</h4><p>1、切换到root用户修改配置</p><pre><code>vi /etc/security/limits.d/90-nproc.conf</code></pre><p>添加下面配置：</p><pre><code>* soft nproc 4096</code></pre><p>2、修改配置</p><pre><code>vi /etc/security/limits.conf</code></pre><p>添加下面配置：</p><pre><code>* soft nproc 2048* hard nproc 4096</code></pre><p>并执行命令：</p><pre><code>sysctl -p</code></pre><p>然后，重新启动elasticsearch，即可启动成功。</p><h3 id="7、Could-not-reliably-determine-the-server’s-fully-qualified-domain-name-using-10-117-235-227-for-ServerName"><a href="#7、Could-not-reliably-determine-the-server’s-fully-qualified-domain-name-using-10-117-235-227-for-ServerName" class="headerlink" title="7、Could not reliably determine the server’s fully qualified domain name, using 10.117.235.227 for ServerName"></a>7、Could not reliably determine the server’s fully qualified domain name, using 10.117.235.227 for ServerName</h3><h4 id="原因：-1"><a href="#原因：-1" class="headerlink" title="原因："></a>原因：</h4><p>此问题是在用httpd服务器做端口转发时遇到的问题。域名解析到此服务器，然后把9200端口转发到80端口，访问搜索引擎时就不用再域名后加端口了。</p><h4 id="解决办法：-6"><a href="#解决办法：-6" class="headerlink" title="解决办法："></a>解决办法：</h4><p>修改/etc/apache2/httpd.conf</p><pre><code>vi /etc/apache2/httpd.conf</code></pre><p>找到如下配置，去掉注释：</p><pre><code>ServerName localhost:80</code></pre><p>重启httpd即可。</p><h3 id="8、system-call-filters-failed-to-install-check-the-logs-and-fix-your-configuration-or-disable-system-call-filters-at-your-own-risk"><a href="#8、system-call-filters-failed-to-install-check-the-logs-and-fix-your-configuration-or-disable-system-call-filters-at-your-own-risk" class="headerlink" title="8、system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk"></a>8、system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk</h3><h4 id="原因：-2"><a href="#原因：-2" class="headerlink" title="原因："></a>原因：</h4><p>CentOS6.X 不支持SecComp，而ES5.2.0默认bootstrap.system_call_filter为true进行检测，所以导致检测失败，失败后直接导致ES不能启动。</p><h4 id="解决办法：-7"><a href="#解决办法：-7" class="headerlink" title="解决办法："></a>解决办法：</h4><p>修改/opt/es/elasticsearch-5.5.0/config/elasticsearch.yml中配置</p><pre><code>vi /opt/es/elasticsearch-5.5.0/config/elasticsearch.yml</code></pre><p>修改如下配置：</p><pre><code>bootstrap.memory_lock: falsebootstrap.system_call_filter: false</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、error-’Cannot-allocate-memory’-errno-12&quot;&gt;&lt;a href=&quot;#1、error-’Cannot-allocate-memory’-errno-12&quot; class=&quot;headerlink&quot; title=&quot;1、error=’C
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="ElasticSearch" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/ElasticSearch/"/>
    
    
      <category term="ElasticSearch" scheme="http://zbc.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>URL编码/解码</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/Other/url-encode/"/>
    <id>http://zbc.io/cn/技术/Other/url-encode/</id>
    <published>2018-04-28T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、为什么需要URL编码？"><a href="#一、为什么需要URL编码？" class="headerlink" title="一、为什么需要URL编码？"></a>一、为什么需要URL编码？</h3><p>通常如果一样东西需要编码，说明这样东西并不适合传输。原因多种多样，如Size过大，包含隐私数据，对于URL来说，之所以要进行编码，是因为URL中有些字符会引起歧义。</p><p>例如URL参数字符串中使用key=value键值对这样的形式来传参，键值对之间以&amp;符号分隔，如/s?q=abc&amp;ie=utf-8。如果你的value字符串中包含了=或者&amp;，那么势必会造成接收URL的服务器解析错误，因此必须将引起歧义的&amp;和=符号进行转义，也就是对其进行编码。</p><p>又如，URL的编码格式采用的是ASCII码，而不是Unicode，这也就是说你不能在URL中包含任何非ASCII字符，例如中文。否则如果客户端浏览器和服务端浏览器支持的字符集不同的情况下，中文可能会造成问题。</p><p>URL编码的原则就是使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。</p><h3 id="二、哪些字符需要编码？"><a href="#二、哪些字符需要编码？" class="headerlink" title="二、哪些字符需要编码？"></a>二、哪些字符需要编码？</h3><pre><code>RFC3986文档规定，URL中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符。</code></pre><p>RFC3986文档对URL的编解码问题做出了详细的建议，指出了哪些字符需要被编码才不会引起URL语义的转变，以及对为什么这些字符需要编码做出了相应的解释。</p><h4 id="US-ASCII字符集中没有对应的可打印字符"><a href="#US-ASCII字符集中没有对应的可打印字符" class="headerlink" title="US-ASCII字符集中没有对应的可打印字符"></a>US-ASCII字符集中没有对应的可打印字符</h4><p>URL中只允许使用可打印字符。US-ASCII码中的10-7F字节全都表示控制字符，这些字符都不能直接出现在URL中。同时，对于80-FF字节（ISO-8859-1），由于已经超出了US-ACII定义的字节范围，因此也不可以放在URL中。</p><h4 id="保留字符"><a href="#保留字符" class="headerlink" title="保留字符"></a>保留字符</h4><p>URL可以划分成若干个组件，协议、主机、路径等。有一些字符（:/?#[]@）是用作分隔不同组件的。</p><p>例如:冒号用于分隔协议和主机，/用于分隔主机和路径，?用于分隔路径和查询参数，等等。</p><p>还有一些字符（!$&amp;’()*+,;=）用于在每个组件中起到分隔作用的，如=用于表示查询参数中的键值对，&amp;符号用于分隔查询多个键值对。当组件中的普通数据包含这些特殊字符时，需要对其进行编码。</p><p>RFC3986中指定了以下字符为保留字符：</p><pre><code>!    *    &apos;    (    )    ;    :    @    &amp;    =    +    $    ,    /    ?    #    [    ]</code></pre><h4 id="不安全字符"><a href="#不安全字符" class="headerlink" title="不安全字符"></a>不安全字符</h4><p>还有一些字符，当他们直接放在URL中的时候，可能会引起解析程序的歧义。这些字符被视为不安全字符，原因有很多。</p><table><thead><tr><th>不安全字符</th><th>不安全原因</th></tr></thead><tbody><tr><td>空格</td><td>Url在传输的过程，或者用户在排版的过程，或者文本处理程序在处理Url的过程，都有可能引入无关紧要的空格，或者将那些有意义的空格给去掉</td></tr><tr><td>引号以及&lt;&gt;</td><td>引号和尖括号通常用于在普通文本中起到分隔Url的作用</td></tr><tr><td>#</td><td>通常用于表示书签或者锚点</td></tr><tr><td>%</td><td>百分号本身用作对不安全字符进行编码时使用的特殊字符，因此本身需要编码</td></tr><tr><td>{}&#124;\^[]`~</td><td>某一些网关或者传输代理会篡改这些字符</td></tr></tbody></table><p>需要注意的是，对于Url中的合法字符，编码和不编码是等价的，但是对于上面提到的这些字符，如果不经过编码，那么它们有可能会造成Url语义的不同。因此对于Url而言，只有普通英文字符和数字，特殊字符$-_.+!*’()还有保留字符，才能出现在未经编码的Url之中。其他字符均需要经过编码之后才能出现在Url中。</p><p>但是由于历史原因，目前尚存在一些不标准的编码实现。例如对于~符号，虽然RFC3986文档规定，对于波浪符号~，不需要进行Url编码，但是还是有很多老的网关或者传输代理会。</p><h3 id="三、如何对Url中的非法字符进行编码"><a href="#三、如何对Url中的非法字符进行编码" class="headerlink" title="三、如何对Url中的非法字符进行编码"></a>三、如何对Url中的非法字符进行编码</h3><p>Url编码通常也被称为百分号编码（Url Encoding，also known as percent-encoding），是因为它的编码方式非常简单，使用%百分号加上两位的字符——0123456789ABCDEF——代表一个字节的十六进制形式。Url编码默认使用的字符集是US-ASCII。例如a在US-ASCII码中对应的字节是0x61，那么Url编码之后得到的就是%61，我们在地址栏上输入<a href="http://g.cn/search?q=%61%62%63" target="_blank" rel="noopener">http://g.cn/search?q=%61%62%63</a><br>实际上就等同于在google上搜索abc了。又如@符号在ASCII字符集中对应的字节为0x40，经过Url编码之后得到的是%40。</p><p>常见保留字符的Url编码列表：</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>!</td><td>*</td><td>“</td><td>‘</td><td>(</td><td>)</td><td>;</td><td>:</td><td>@</td><td>&amp;</td></tr><tr><td>%21</td><td>%2A</td><td>%22</td><td>%27</td><td>%28</td><td>%29</td><td>%3B</td><td>%3A</td><td>%40</td><td>%26</td></tr><tr><td>=</td><td>+</td><td>$</td><td>,</td><td>/</td><td>?</td><td>%</td><td>#</td><td>[</td><td>]</td></tr><tr><td>%3D</td><td>%2B</td><td>%24</td><td>%2C</td><td>%2F</td><td>%3F</td><td>%25</td><td>%23</td><td>%5B</td><td>%5D</td></tr></tbody></table><p>对于非ASCII字符，需要使用ASCII字符集的超集进行编码得到相应的字节，然后对每个字节执行百分号编码。对于Unicode字符，RFC文档建议使用utf-8对其进行编码得到相应的字节，然后对每个字节执行百分号编码。如“中文”使用UTF-8字符集得到的字节为0xE4 0xB8 0xAD 0xE6 0x96 0x87，经过Url编码之后得到“%E4%B8%AD%E6%96%87”。</p><p>如果某个字节对应着ASCII字符集中的某个非保留字符，则此字节无需使用百分号表示。例如“Url编码”，使用UTF-8编码得到的字节是0x55 0x72 0x6C 0xE7 0xBC 0x96 0xE7 0xA0 0x81，由于前三个字节对应着ASCII中的非保留字符“Url”，因此这三个字节可以用非保留字符“Url”表示。最终的Url编码可以简化成“Url%E7%BC%96%E7%A0%81” ，当然，如果你用”%55%72%6C%E7%BC%96%E7%A0%81”也是可以的。</p><p>由于历史的原因，有一些Url编码实现并不完全遵循这样的原则，下面会提到。</p><h3 id="四、Javascript中的escape-encodeURI和encodeURIComponent的区别"><a href="#四、Javascript中的escape-encodeURI和encodeURIComponent的区别" class="headerlink" title="四、Javascript中的escape,encodeURI和encodeURIComponent的区别"></a>四、Javascript中的escape,encodeURI和encodeURIComponent的区别</h3><p>Javascript中提供了3对函数用来对Url编码以得到合法的Url，它们分别是escape / unescape,encodeURI / decodeURI和encodeURIComponent / decodeURIComponent。由于解码和编码的过程是可逆的，因此这里只解释编码的过程。</p><p>这三个编码的函数——escape，encodeURI，encodeURIComponent——都是用于将不安全不合法的Url字符转换为合法的Url字符表示，它们有以下几个不同点。</p><h4 id="安全字符不同"><a href="#安全字符不同" class="headerlink" title="安全字符不同"></a>安全字符不同</h4><p>下面的表格列出了这三个函数的安全字符（即函数不会对这些字符进行编码）</p><table><thead><tr><th></th><th>安全字符</th></tr></thead><tbody><tr><td>escape（69个）</td><td>*/@+-._0-9a-zA-Z</td></tr><tr><td>encodeURI（82个）</td><td>!#$&amp;’()*+,/:;=?@-._~0-9a-zA-Z</td></tr><tr><td>encodeURIComponent（71个）</td><td>!’()*-._~0-9a-zA-Z</td></tr></tbody></table><h4 id="兼容性不同"><a href="#兼容性不同" class="headerlink" title="兼容性不同"></a>兼容性不同</h4><p>escape函数是从Javascript1.0的时候就存在了，其他两个函数是在Javascript1.5才引入的。但是由于Javascript1.5已经非常普及了，所以实际上使用encodeURI和encodeURIComponent并不会有什么兼容性问题。</p><h4 id="对Unicode字符的编码方式不同"><a href="#对Unicode字符的编码方式不同" class="headerlink" title="对Unicode字符的编码方式不同"></a>对Unicode字符的编码方式不同</h4><p>这三个函数对于ASCII字符的编码方式相同，均是使用百分号+两位十六进制字符来表示。但是对于Unicode字符，escape的编码方式是%uxxxx，其中的xxxx是用来表示unicode字符的4位十六进制字符。这种方式已经被W3C废弃了。但是在ECMA-262标准中仍然保留着escape的这种编码语法。encodeURI和encodeURIComponent则使用UTF-8对非ASCII字符进行编码，然后再进行百分号编码。这是RFC推荐的。因此建议尽可能的使用这两个函数替代escape进行编码。</p><h4 id="适用场合不同"><a href="#适用场合不同" class="headerlink" title="适用场合不同"></a>适用场合不同</h4><p>encodeURI被用作对一个完整的URI进行编码，而encodeURIComponent被用作对URI的一个组件进行编码。</p><p>从上面提到的安全字符范围表格来看，我们会发现，encodeURIComponent编码的字符范围要比encodeURI的大。我们上面提到过，保留字符一般是用来分隔URI组件（一个URI可以被切割成多个组件，参考预备知识一节）或者子组件（如URI中查询参数的分隔符），如:号用于分隔scheme和主机，?号用于分隔主机和路径。由于encodeURI操纵的对象是一个完整的的URI，这些字符在URI中本来就有特殊用途，因此这些保留字符不会被encodeURI编码，否则意义就变了。</p><p>组件内部有自己的数据表示格式，但是这些数据内部不能包含有分隔组件的保留字符，否则就会导致整个URI中组件的分隔混乱。因此对于单个组件使用encodeURIComponent，需要编码的字符就更多了。</p><h3 id="五、表单提交"><a href="#五、表单提交" class="headerlink" title="五、表单提交"></a>五、表单提交</h3><p>当Html的表单被提交时，每个表单域都会被Url编码之后才在被发送。由于历史的原因，表单使用的Url编码实现并不符合最新的标准。例如对于空格使用的编码并不是%20，而是+号，如果表单使用的是Post方法提交的，我们可以在HTTP头中看到有一个Content-Type的header，值为application/x-www-form-urlencoded。大部分应用程序均能处理这种非标准实现的Url编码，但是在客户端Javascript中，并没有一个函数能够将+号解码成空格，只能自己写转换函数。还有，对于非ASCII字符，使用的编码字符集取决于当前文档使用的字符集。例如我们在Html头部加上</p><pre><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&gt;</code></pre><p>这样浏览器就会使用gb2312去渲染此文档（注意，当HTML文档中没有设置此meta标签，则浏览器会根据当前用户喜好去自动选择字符集，用户也可以强制当前网站使用某个指定的字符集）。当提交表单时，Url编码使用的字符集就是gb2312。</p><h3 id="六、文档字符集会影响encodeURI吗？"><a href="#六、文档字符集会影响encodeURI吗？" class="headerlink" title="六、文档字符集会影响encodeURI吗？"></a>六、文档字符集会影响encodeURI吗？</h3><p>之前在使用Aptana（为什么专指aptana下面会提到）遇到一个很迷惑的问题，就是在使用encodeURI的时候，发现它编码得到的结果和我想的很不一样。下面是我的示例代码：</p><pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;    &lt;head&gt;        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;script type=&quot;text/javascript&quot;&gt;            document.write(encodeURI(&quot;中文&quot;));        &lt;/script&gt;    &lt;/body&gt;&lt;/html&gt; </code></pre><p>运行结果输出%E6%B6%93%EE%85%9F%E6%9E%83。显然这并不是使用UTF-8字符集进行Url编码得到的结果（在Google上搜索“中文”，Url中显示的是%E4%B8%AD%E6%96%87）。</p><p>所以我当时就很质疑，难道encodeURI还跟页面编码有关，但是我发现，正常情况下，如果你使用gb2312进行Url编码也不会得到这个结果的才是。后来终于被我发现，原来是页面文件存储使用的字符集和Meta标签中指定的字符集不一致导致的问题。Aptana的编辑器默认情况下使用UTF-8字符集。也就是说这个文件实际存储的时候使用的是UTF-8字符集。但是由于Meta标签中指定了gb2312，这个时候，浏览器就会按照gb2312去解析这个文档，那么自然在“中文”这个字符串这里就会出错，因为“中文”字符串用UTF-8编码过后得到的字节是0xE4 0xB8 0xAD 0xE6 0x96 0x87，这6个字节又被浏览器拿gb2312去解码，那么就会得到另外三个汉字“涓枃”（GBK中一个汉字占两个字节），这三个汉字在传入encodeURI函数之后得到的结果就是%E6%B6%93%EE%85%9F%E6%9E%83。因此，encodeURI使用的还是UTF-8，并不会受到页面字符集的影响。</p><h3 id="七、其他和Url编码相关的问题"><a href="#七、其他和Url编码相关的问题" class="headerlink" title="七、其他和Url编码相关的问题"></a>七、其他和Url编码相关的问题</h3><p>对于包含中文的Url的处理问题，不同浏览器有不同的表现。例如对于IE，如果你勾选了高级设置“总是以UTF-8发送Url”，那么Url中的路径部分的中文会使用UTF-8进行Url编码之后发送给服务端，而查询参数中的中文部分使用系统默认字符集进行Url编码。为了保证最大互操作性，建议所有放到Url中的组件全部显式指定某个字符集进行Url编码，而不依赖于浏览器的默认实现。</p><p>另外，很多HTTP监视工具或者浏览器地址栏等在显示Url的时候会自动将Url进行一次解码（使用UTF-8字符集），这就是为什么当你在Firefox中访问Google搜索中文的时候，地址栏显示的Url包含中文的缘故。但实际上发送给服务端的原始Url还是经过编码的。你可以在地址栏上使用Javascript访问location.href就可以看出来了。在研究Url编解码的时候千万别被这些假象给迷惑了。</p><p>参考：<a href="http://www.imkevinyang.com/2009/08/%E8%AF%A6%E8%A7%A3javascript%E4%B8%AD%E7%9A%84url%E7%BC%96%E8%A7%A3%E7%A0%81.html" target="_blank" rel="noopener">详解Javascript中的Url编码/解码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、为什么需要URL编码？&quot;&gt;&lt;a href=&quot;#一、为什么需要URL编码？&quot; class=&quot;headerlink&quot; title=&quot;一、为什么需要URL编码？&quot;&gt;&lt;/a&gt;一、为什么需要URL编码？&lt;/h3&gt;&lt;p&gt;通常如果一样东西需要编码，说明这样东西并不适合传输。
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Other" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/Other/"/>
    
    
      <category term="Other" scheme="http://zbc.io/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>MyEclipse启动服务报错：Could not create the Java virtual machine</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/Eclipse/myeclipse-could-not-create-the-jvm/"/>
    <id>http://zbc.io/cn/技术/Eclipse/myeclipse-could-not-create-the-jvm/</id>
    <published>2017-05-18T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<p>最近遇到一个问题，在MyEclipse中启动weblogic时，偶尔会报Could not create the Java virtual machine。开始也没找到什么规律，只知道刚开机的时候就能启动成功。后来感觉不是个办法，还是找找原因吧。原因肯定是和参数设置有关系，但是反复改了好多次参数，尝试了好多次才成功，所以记录一下。</p><p>首先，我的MyEclipse设置如下：</p><pre><code>-Xmx2048m-XX:MaxPermSize=256m-XX:ReservedCodeCacheSize=64m</code></pre><p>weblogic的启动参数设置如下：</p><pre><code>-Xms1024m -Xmx1024m -XX:CompileThreshold=8000 -XX:PermSize=128m -XX:MaxPermSize=512m -Xverify:none -da</code></pre><p>电脑的总内存是12GB，内存绝对是够用的。</p><p>后来无意中发现，我把非堆内存的值调低，就可以启动了：</p><pre><code>-Xms1024m -Xmx1024m -XX:CompileThreshold=8000 -XX:PermSize=128m -XX:MaxPermSize=256m -Xverify:none -da</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近遇到一个问题，在MyEclipse中启动weblogic时，偶尔会报Could not create the Java virtual machine。开始也没找到什么规律，只知道刚开机的时候就能启动成功。后来感觉不是个办法，还是找找原因吧。原因肯定是和参数设置有关系，
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Eclipse" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/Eclipse/"/>
    
    
      <category term="Eclipse" scheme="http://zbc.io/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>微服务设计</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/building-microservices/"/>
    <id>http://zbc.io/cn/技术/微服务/building-microservices/</id>
    <published>2017-05-01T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<p>1、一个微服务应该可以在两周内完全重写。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、一个微服务应该可以在两周内完全重写。&lt;/p&gt;

      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="微服务" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="http://zbc.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud常见问题</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/Spring-Cloud/spring-cloud-faq/"/>
    <id>http://zbc.io/cn/技术/Spring-Cloud/spring-cloud-faq/</id>
    <published>2017-04-28T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Eureka的自我保护模式"><a href="#Eureka的自我保护模式" class="headerlink" title="Eureka的自我保护模式"></a>Eureka的自我保护模式</h3><p>如果在Eureka Server的首页看到以下这段提示，则说明Eureka已经进入了保护模式。</p><pre><code>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&apos;RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</code></pre><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据（也就是不会注销任何微服务）。</p><p>详见：<a href="https://github.com/Netflix/eureka/wiki/Understanding-Eureka-Peer-to-Peer-Communication" target="_blank" rel="noopener">https://github.com/Netflix/eureka/wiki/Understanding-Eureka-Peer-to-Peer-Communication</a></p><p>参考：<a href="http://blog.csdn.net/jdhanhua/article/details/55002191" target="_blank" rel="noopener">Spring Cloud中，Eureka常见问题总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Eureka的自我保护模式&quot;&gt;&lt;a href=&quot;#Eureka的自我保护模式&quot; class=&quot;headerlink&quot; title=&quot;Eureka的自我保护模式&quot;&gt;&lt;/a&gt;Eureka的自我保护模式&lt;/h3&gt;&lt;p&gt;如果在Eureka Server的首页看到以下这段提
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Spring Cloud" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://zbc.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot （一） Hello World</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/Spring-Boot/spring-boot-hello-world/"/>
    <id>http://zbc.io/cn/技术/Spring-Boot/spring-boot-hello-world/</id>
    <published>2017-04-15T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ready"><a href="#Ready" class="headerlink" title="Ready"></a>Ready</h3><p>IDE：<a href="https://spring.io/tools" target="_blank" rel="noopener">Spring Tool Suite</a><br>Jdk：1.8<br>Gradle：3.5</p><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><p>打开STS，新建一个Spring Starter Project，Next &gt;，Spring Boot Version选择当前的发行版本1.5.2，Finish。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ready&quot;&gt;&lt;a href=&quot;#Ready&quot; class=&quot;headerlink&quot; title=&quot;Ready&quot;&gt;&lt;/a&gt;Ready&lt;/h3&gt;&lt;p&gt;IDE：&lt;a href=&quot;https://spring.io/tools&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Spring Boot" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="http://zbc.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>使用Travis CI自动部署Hexo博客到Github</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/Hexo/travisci-hexo-github/"/>
    <id>http://zbc.io/cn/技术/Hexo/travisci-hexo-github/</id>
    <published>2017-03-10T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<p>只总结了Travis CI的部分，默认认为已掌握Hexo和GitHub的基本使用。</p><h3 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h3><p>首先，要使用Travis CI，必须要GIthub账号。在<a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI官网</a>使用GitHub账号登录。</p><p>登录后创建一个新的Repositories，选择并开启有Hexo源码的仓库。</p><p>然后进行一些设置，在General Settings中，打开如下两项即可：</p><p>Build only if .travis.yml is present：是只有在.travis.yml文件中配置的分支改变了才构建</p><p>Build pushes：当推送完这个分支后开始构建</p><a id="more"></a><h3 id="在GitHub上生成Access-Token"><a href="#在GitHub上生成Access-Token" class="headerlink" title="在GitHub上生成Access Token"></a>在GitHub上生成Access Token</h3><p>Setting–&gt;Personal access tokens–&gt;Generate new token</p><p>随便填个名称，然后下面根据需要进行勾选。</p><p>然后回到Travis CI中，在刚建的那个Repositories中设置Environment Variables：</p><p>  name：GH_TOKEN<br>  value：刚刚在GitHub中生成的key</p><h3 id="travis-yml"><a href="#travis-yml" class="headerlink" title=".travis.yml"></a>.travis.yml</h3><p>接下来在源代码的根目录添加.travis.yml配置文件，内容如下：</p><pre><code>language: node_jsnode_js: stable# S: Build Lifecycleinstall:  - npm install#before_script: # - npm install -g gulpscript:  - hexo gafter_script:  - cd ./public  - git init  - git config user.name &quot;xxx&quot;  - git config user.email &quot;xxx@gmail.com&quot;  - git add .  - git commit -m &quot;Update docs&quot;  - git push --force --quiet &quot;https://${GH_TOKEN}@${GH_REF}&quot; master:master# E: Build LifeCyclebranches:  only:    - masterenv: global:   - GH_REF: github.com/xxx/xxx.github.io.git</code></pre><p>把xxx替换为自己的名字或者账号即可。</p><p>参考：<a href="http://blog.csdn.net/woblog/article/details/51319364" target="_blank" rel="noopener">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;只总结了Travis CI的部分，默认认为已掌握Hexo和GitHub的基本使用。&lt;/p&gt;
&lt;h3 id=&quot;Travis-CI&quot;&gt;&lt;a href=&quot;#Travis-CI&quot; class=&quot;headerlink&quot; title=&quot;Travis CI&quot;&gt;&lt;/a&gt;Travis CI&lt;/h3&gt;&lt;p&gt;首先，要使用Travis CI，必须要GIthub账号。在&lt;a href=&quot;https://travis-ci.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Travis CI官网&lt;/a&gt;使用GitHub账号登录。&lt;/p&gt;
&lt;p&gt;登录后创建一个新的Repositories，选择并开启有Hexo源码的仓库。&lt;/p&gt;
&lt;p&gt;然后进行一些设置，在General Settings中，打开如下两项即可：&lt;/p&gt;
&lt;p&gt;Build only if .travis.yml is present：是只有在.travis.yml文件中配置的分支改变了才构建&lt;/p&gt;
&lt;p&gt;Build pushes：当推送完这个分支后开始构建&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Hexo" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/Hexo/"/>
    
    
      <category term="Travis CI" scheme="http://zbc.io/tags/Travis-CI/"/>
    
      <category term="Hexo" scheme="http://zbc.io/tags/Hexo/"/>
    
      <category term="Github" scheme="http://zbc.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>树莓派无显示器安装步骤</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/RaspberryPi/raspberry-pi-noscreen-install/"/>
    <id>http://zbc.io/cn/技术/RaspberryPi/raspberry-pi-noscreen-install/</id>
    <published>2017-03-09T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>1、树莓派<br>2、SD卡（8G+）<br>3、Android通用充电器（5V2A）<br>4、路由器<br>5、网线一根<br>6、电脑一台</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载官方提供的Raspberry Pi专用Debian——Raspbian，将下载后的.zip文件解压，得到一个.img文件。打开Win32DiskImager，选择.img文件和SD卡，点击Write按钮开始安装系统到SD卡上。</p><a id="more"></a><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>安装完成后，把SD卡插到树莓派的卡槽上，接上电源，网线（连接路由器），树莓派会自动启动。</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>登录路由器的管理页面（通常为192.168.1.1），找到叫做Raspberrypi的设备的IP，这便是树莓派的局域网IP。</p><p>打开SSH工具，连接树莓派的局域网IP，端口22，默认用户名：pi，密码：raspberry</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>登录SSH后，需要配置一下，输入：sudo raspi-config，选择Expand Filesystem，这步是为了把整个系统的可用空间扩展到SD卡的大小。</p><p>选择Finish，然后重启并生效。</p><h3 id="安装远程桌面"><a href="#安装远程桌面" class="headerlink" title="安装远程桌面"></a>安装远程桌面</h3><p>远程桌面控制需要安装vncserver，执行命令：sudo apt-get install tightvncserver。</p><p>安装完成后可以使用vncpasswd命令来设置密码，然后询问是否设置一个view-only密码，根据自己需要决定是否要设置。</p><p>第一次启动图形界面的服务时也会提示进行设置。</p><p>启动图形界面的命令：</p><p>  vncserver :1 -geometry 800x600</p><p>命令中的:1表示的是1号桌面，我们也可以输入:2创建2号桌面。然后-geometry 800x600当然就是设置分辨率。</p><p>可以使用vncserver -kill :1这个命令来杀死1号桌面。</p><p>然后就可以使用VNC连接远程桌面了。</p><h3 id="连接远程桌面"><a href="#连接远程桌面" class="headerlink" title="连接远程桌面"></a>连接远程桌面</h3><p>下载VNC，安装并打开。</p><p>输入树莓派的IP以及桌面的号码（例如：192.168.1.22:1），点connect后输入密码即可登录。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://www.eeboard.com/bbs/thread-27029-1-1.html" target="_blank" rel="noopener">http://www.eeboard.com/bbs/thread-27029-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;p&gt;1、树莓派&lt;br&gt;2、SD卡（8G+）&lt;br&gt;3、Android通用充电器（5V2A）&lt;br&gt;4、路由器&lt;br&gt;5、网线一根&lt;br&gt;6、电脑一台&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;下载官方提供的Raspberry Pi专用Debian——Raspbian，将下载后的.zip文件解压，得到一个.img文件。打开Win32DiskImager，选择.img文件和SD卡，点击Write按钮开始安装系统到SD卡上。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="RaspberryPi" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/RaspberryPi/"/>
    
    
      <category term="树莓派" scheme="http://zbc.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派启用root账户</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/RaspberryPi/raspberry-pi-root/"/>
    <id>http://zbc.io/cn/技术/RaspberryPi/raspberry-pi-root/</id>
    <published>2017-03-09T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派使用的linux是debian系统，所以树莓派启用root和debian是相同的。</p><p>debian里root账户默认没有密码，但账户锁定。</p><p>当需要root权限时，由默认账户经由sudo执行，Raspberry pi系统中的Raspbian默认用户是pi 密码为raspberry</p><a id="more"></a><p>重新开启root账号，可由pi用户登录后，在命令行下执行</p><p>  sudo passwd root</p><p>执行此命令后系统会提示输入两遍的root密码，输入你想设的密码即可，然后在执行</p><p>  sudo passwd –unlock root</p><p>这样就可以解锁root账户了。</p><p>参考：<a href="http://outofmemory.cn/code-snippet/2897/shumeipai" target="_blank" rel="noopener">http://outofmemory.cn/code-snippet/2897/shumeipai</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树莓派使用的linux是debian系统，所以树莓派启用root和debian是相同的。&lt;/p&gt;
&lt;p&gt;debian里root账户默认没有密码，但账户锁定。&lt;/p&gt;
&lt;p&gt;当需要root权限时，由默认账户经由sudo执行，Raspberry pi系统中的Raspbian默认用户是pi 密码为raspberry&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="RaspberryPi" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/RaspberryPi/"/>
    
    
      <category term="树莓派" scheme="http://zbc.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Spring事务类型</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/Spring/spring-transaction/"/>
    <id>http://zbc.io/cn/技术/Spring/spring-transaction/</id>
    <published>2017-02-16T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<p>PROPAGATION_REQUIRED–支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</p><p>PROPAGATION_SUPPORTS–支持当前事务，如果当前没有事务，就以非事务方式执行。</p><p>PROPAGATION_MANDATORY–支持当前事务，如果当前没有事务，就抛出异常。</p><p>PROPAGATION_REQUIRES_NEW–新建事务，如果当前存在事务，把当前事务挂起。</p><p>PROPAGATION_NOT_SUPPORTED–以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p><p>PROPAGATION_NEVER–以非事务方式执行，如果当前存在事务，则抛出异常。</p><p>PROPAGATION_NESTED–如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PROPAGATION_REQUIRED–支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。&lt;/p&gt;
&lt;p&gt;PROPAGATION_SUPPORTS–支持当前事务，如果当前没有事务，就以非事务方式执行。&lt;/p&gt;
&lt;p&gt;PROPAGATION_MANDATOR
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Spring" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/Spring/"/>
    
    
      <category term="Spring" scheme="http://zbc.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>MySQL连接数</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/MySQL/mysql-connections/"/>
    <id>http://zbc.io/cn/技术/MySQL/mysql-connections/</id>
    <published>2016-10-17T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、设置最大连接数："><a href="#1、设置最大连接数：" class="headerlink" title="1、设置最大连接数："></a>1、设置最大连接数：</h4><h5 id="方法一、使用mysql命令："><a href="#方法一、使用mysql命令：" class="headerlink" title="方法一、使用mysql命令："></a>方法一、使用mysql命令：</h5><pre><code>查看最大连接数：show variables like &apos;max_connections&apos;;查看响应的最大连接数：show global status like &apos;Max_used_connections&apos;;设置最大连接数：set GLOBAL max_connections=连接数;</code></pre><h5 id="方法二、修改-etc-my-cnf中的max-connections"><a href="#方法二、修改-etc-my-cnf中的max-connections" class="headerlink" title="方法二、修改/etc/my.cnf中的max_connections"></a>方法二、修改/etc/my.cnf中的max_connections</h5><h4 id="2、show-status："><a href="#2、show-status：" class="headerlink" title="2、show status："></a>2、show status：</h4><pre><code>Threads_connected  当前的连接数Connections  试图连接到(不管是否成功)MySQL服务器的连接数。Max_used_connections  服务器启动后已经同时使用的连接的最大数量。</code></pre><h4 id="3、显示当前mysql状态："><a href="#3、显示当前mysql状态：" class="headerlink" title="3、显示当前mysql状态："></a>3、显示当前mysql状态：</h4><pre><code>mysql&gt; status                                                                                                                                                                               --------------                                                                                                                                                                              mysql  Ver 14.14 Distrib 5.6.33, for linux-glibc2.5 (x86_64) using  EditLine wrapper                                                                                                        Connection id:          1107720                                                                                                                                                             Current database:                                                                                                                                                                           Current user:           root@localhost                                                                                                                                                      SSL:                    Not in use                                                                                                                                                          Current pager:          stdout                                                                                                                                                              Using outfile:          &apos;&apos;                                                                                                                                                                  Using delimiter:        ;                                                                                                                                                                   Server version:         5.6.33 MySQL Community Server (GPL)                                                                                                                                 Protocol version:       10                                                                                                                                                                  Connection:             Localhost via UNIX socket                                                                                                                                           Server characterset:    latin1                                                                                                                                                              Db     characterset:    latin1                                                                                                                                                              Client characterset:    utf8                                                                                                                                                                Conn.  characterset:    utf8                                                                                                                                                                UNIX socket:            /tmp/mysql.sock                                                                                                                                                     Uptime:                 7 days 3 hours 58 min 4 sec                                                                                                                                         Threads: 28  Questions: 8621582  Slow queries: 0  Opens: 73  Flush tables: 1  Open tables: 66  Queries per second avg: 13.926                                                               --------------  </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1、设置最大连接数：&quot;&gt;&lt;a href=&quot;#1、设置最大连接数：&quot; class=&quot;headerlink&quot; title=&quot;1、设置最大连接数：&quot;&gt;&lt;/a&gt;1、设置最大连接数：&lt;/h4&gt;&lt;h5 id=&quot;方法一、使用mysql命令：&quot;&gt;&lt;a href=&quot;#方法一、使用m
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="MySQL" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://zbc.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>关于Java空格的那些事</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/Java/java-white-space/"/>
    <id>http://zbc.io/cn/技术/Java/java-white-space/</id>
    <published>2016-09-20T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.386Z</updated>
    
    <content type="html"><![CDATA[<p>摘要—使用Character.isWhitespace(char ch)来判断任意编码的空格字符。  </p><p>最近公司要求前台输入框要校验中文空格，无意间发现StringUtils.isNotBlank(String str)这个方法校验时会校验到中文空格，用起来很方便。  </p><p>出于好奇，就看了看源码，发现有这么一段：  </p><pre><code>if (Character.isWhitespace(str.charAt(i)) == false)</code></pre><p>于是打开Java API文档，看看Character.isWhitespace(char ch)这个方法的说明。  </p><p>果然找到了如下这么一段：  </p><pre><code>public static boolean isWhitespace(char ch)Determines if the specified character is white space according to Java. A character is a Java whitespace character if and only if it satisfies one of the following criteria:It is a Unicode space character (SPACE_SEPARATOR, LINE_SEPARATOR, or PARAGRAPH_SEPARATOR) but is not also a non-breaking space (&apos;\u00A0&apos;, &apos;\u2007&apos;, &apos;\u202F&apos;).It is &apos;\t&apos;, U+0009 HORIZONTAL TABULATION.It is &apos;\n&apos;, U+000A LINE FEED.It is &apos;\u000B&apos;, U+000B VERTICAL TABULATION.It is &apos;\f&apos;, U+000C FORM FEED.It is &apos;\r&apos;, U+000D CARRIAGE RETURN.It is &apos;\u001C&apos;, U+001C FILE SEPARATOR.It is &apos;\u001D&apos;, U+001D GROUP SEPARATOR.It is &apos;\u001E&apos;, U+001E RECORD SEPARATOR.It is &apos;\u001F&apos;, U+001F UNIT SEPARATOR.Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isWhitespace(int) method.Parameters:ch - the character to be tested.Returns:true if the character is a Java whitespace character; false otherwise.Since:1.1See Also:isSpaceChar(char)</code></pre><p>也就是说，只要是空格，不管是什么编码的，这个方法都可以进行判断。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘要—使用Character.isWhitespace(char ch)来判断任意编码的空格字符。  &lt;/p&gt;
&lt;p&gt;最近公司要求前台输入框要校验中文空格，无意间发现StringUtils.isNotBlank(String str)这个方法校验时会校验到中文空格，用起来很
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
      <category term="Java" scheme="http://zbc.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>简单的Spring定时任务</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/Spring/spring-timed-task/"/>
    <id>http://zbc.io/cn/技术/Spring/spring-timed-task/</id>
    <published>2016-09-10T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.382Z</updated>
    
    <content type="html"><![CDATA[<h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><pre><code>&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;classpath*:applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt;&lt;listener&gt;    &lt;description&gt;Spring Context&lt;/description&gt;    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;</code></pre><h5 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h5><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:task=&quot;http://www.springframework.org/schema/task&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/task        http://www.springframework.org/schema/task/spring-task.xsd&quot;&gt;    &lt;!-- 指定Spring扫描组件的路径 --&gt;    &lt;context:component-scan base-package=&quot;io.zbc.＊&quot; /&gt;    &lt;!-- 使Spring能够识别@Scheduled --&gt;    &lt;task:annotation-driven scheduler=&quot;myScheduled&quot; /&gt;    &lt;!-- 根据情况选择是否需要配置线程池 --&gt;    &lt;task:scheduler id=&quot;myScheduled&quot; pool-size=&quot;10&quot; /&gt;&lt;/beans&gt;</code></pre><h5 id="TestTimedTask-java"><a href="#TestTimedTask-java" class="headerlink" title="TestTimedTask.java"></a>TestTimedTask.java</h5><pre><code>import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;@Componentpublic class TestTimedTask {    // 周一至周五，9:00到17:00之间，每5分钟执行一次    @Scheduled(cron = &quot;0 0/5 9-17 * * MON-FRI&quot;)    public void testTimedTask() {        System.out.println(&quot;任务执行...&quot;);    }}</code></pre><h5 id="cronExpression表达式"><a href="#cronExpression表达式" class="headerlink" title="cronExpression表达式"></a>cronExpression表达式</h5><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒</td><td>0-59</td><td>, - * /</td></tr><tr><td>分</td><td>0-59</td><td>, - * /</td></tr><tr><td>小时</td><td>0-23</td><td>, - * /</td><td></td></tr><tr><td>日期</td><td>1-31</td><td>, - * / L W C</td></tr><tr><td>月份</td><td>1-12 或者 JAN-DEC</td><td>, - * /</td></tr><tr><td>星期</td><td>1-7 或者 SUN-SAT</td><td>, - * / L C #</td></tr><tr><td>年（可选）</td><td>留空, 1970-2099</td><td>, - * /</td></tr></tbody></table><h5 id="特殊字符解释："><a href="#特殊字符解释：" class="headerlink" title="特殊字符解释："></a>特殊字符解释：</h5><p>“,”字符被用来指定另外的值。如：“MON,WED,FRI”在星期域里表示”星期一、星期三、星期五”。  </p><p>“-”字符被用来指定一个范围。如：“10-12”在小时域意味着“10点、11点、12点”。  </p><p>“*”字符被用来指定所有的值。如：”*“在分钟的字段域里表示“每分钟”。  </p><p>“?”字符只在日期域和星期域中使用。它被用来指定“非明确的值”。当你需要通过在这两个域中的一个来指定一些东西的时候，它是有用的。看下面的例子你就会明白。  </p><p>“L”字符指定在月或者星期中的某天（最后一天）。即“Last ”的缩写。但是在星期和月中“L”表示不同的意思。如：<br>在月子段中“L”指月份的最后一天-1月31日，2月28日；<br>在星期字段中则简单的表示为“7”或者“SAT”；<br>在星期字段中在某个value值得后面，则表示“某月的最后一个星期value”,如“6L”表示某月的最后一个星期五。  </p><p>“W”字符只能用在月份字段中，该字段指定了离指定日期最近的那个星期日。  </p><p>“#”字符只能用在星期字段，该字段指定了第几个星期value在某月中。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;web-xml&quot;&gt;&lt;a href=&quot;#web-xml&quot; class=&quot;headerlink&quot; title=&quot;web.xml&quot;&gt;&lt;/a&gt;web.xml&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;context-param&amp;gt;
    &amp;lt;param-name&amp;g
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Spring" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/Spring/"/>
    
    
      <category term="Spring" scheme="http://zbc.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>在Eclipse中配置Tomcat8.5.x</title>
    <link href="http://zbc.io/cn/%E6%8A%80%E6%9C%AF/Eclipse/eclipse-tomcat-8.5.x/"/>
    <id>http://zbc.io/cn/技术/Eclipse/eclipse-tomcat-8.5.x/</id>
    <published>2016-09-05T00:00:00.000Z</published>
    <updated>2021-03-11T15:41:21.382Z</updated>
    
    <content type="html"><![CDATA[<p>因为eclipse中配置tomcat的时候，eclipse会去获取tomcat的版本（<a href="http://tomcat.apache.org/tomcat-8.5-doc/changelog.html" target="_blank" rel="noopener">Tomcat 8.5.x 分支来自于Tomcat 9.0.0 M4</a>），所以我们只要做个伪装骗过eclipse即可。  </p><p>首先先进入到tomcat的lib目录。  </p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>找到catalina.jar，打开catalina.jar/org/apache/catalina/util/ServerInfo.properties文件，修改server.info的参数：  </p><pre><code>server.info=Apache Tomcat/9.0.5</code></pre><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>在lib目录下创建如下目录：  </p><pre><code>org/apache/catalina/util</code></pre><p>将方法一中找到的ServerInfo.properties文件复制到此目录，修改server.info的参数：  </p><pre><code>server.info=Apache Tomcat/9.0.5</code></pre><p>然后在eclipse中，按照9.0的tomcat去配置就行了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为eclipse中配置tomcat的时候，eclipse会去获取tomcat的版本（&lt;a href=&quot;http://tomcat.apache.org/tomcat-8.5-doc/changelog.html&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="技术" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Eclipse" scheme="http://zbc.io/categories/%E6%8A%80%E6%9C%AF/Eclipse/"/>
    
    
      <category term="Tomcat" scheme="http://zbc.io/tags/Tomcat/"/>
    
      <category term="Eclipse" scheme="http://zbc.io/tags/Eclipse/"/>
    
  </entry>
  
</feed>
